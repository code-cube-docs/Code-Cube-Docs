{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"notifications/","title":"Enable Notifications","text":""},{"location":"notifications/#configuring-monitoring-notifications","title":"Configuring Monitoring Notifications","text":"<p>To enable monitoring notifications for our products, you can access our portal and navigate to the configuration pages of each product such as Tag Monitor, Datalayer Guard or Sitespeed Monitor. From there, select your desired method of receiving notifications based on your subscription model, such as Email, Slack, or Teams. Fill in the required fields accordingly for each method. Follow the steps below accoring to your desired method:</p>"},{"location":"notifications/#email-notifications","title":"Email Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable email updates.</li> <li>Provide the email addresses where you wish to receive the notifications.</li> </ol>"},{"location":"notifications/#slack-notifications","title":"Slack Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable Slack updates.</li> <li>Open your Slack Workspace and copy the workspace ID by clicking on the workspace name.  </li> <li>Paste the workspace ID into the corresponding field in the configuration page and save the form.</li> <li>You will be prompted to log in to your workspace and authorize our app.</li> <li>After authorizing the app, add it to your workspace by clicking the add apps button and selecting the app.</li> <li>Invite the app to the desired channel where you want to receive the notifications by clicking on the channel name, going to the integrations tab and, adding the app.</li> </ol>"},{"location":"notifications/#teams-notifications","title":"Teams Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable Teams updates.</li> <li>Follow these steps to create an incoming webhook for the channel where you want to receive the notifications.</li> <li>Copy the generated Webhook URL and paste it into the corresoinding field and save the form.</li> </ol>"},{"location":"datalayer-guard/datalayer_guard/","title":"Product Description","text":""},{"location":"datalayer-guard/datalayer_guard/#product-description_1","title":"Product Description","text":"<p>This repository contains the DataLayer Guard source code and terraform documents. DataLayer Guard crawls through the provided pages and collect dataLayer objects. Then those objects are compared with the provided templates and checked for errors. After the script ends its work all the dataLayer snapshots together with checked URLs are saved to the BigQuery tables so as errors. If there's any errors found the client receive a message next morning with detailed description of the error and all the checkup information.</p>"},{"location":"datalayer-guard/datalayer_guard/#how-it-works","title":"How it works","text":"<p>The main point of DataLayer Guard work is to get the dataLayer object from the page after page loading or imitating the potential user actions on the page. To perform those actions DataLayer Guard using the advanced page crawling algorythms.</p> <p>To set the configuration user must fill out the configuration form on Code Cube Portal for customers.</p> <p>Steps needed for complete the implementation: 1. Select the checkup frequency (how many times per day should we run checkups) 2. Set the list of emails which should be notified about the errors 3. Turn on the slack alerts as well if it's needed 4. Fill the dataLayer events: custom event name, URL and JSON-object of the dataLayer template which would be used to check the page dataLayer</p>"},{"location":"datalayer-guard/datalayer_guard/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Dataleyer Guard.</p>"},{"location":"datalayer-guard/events-tag-manager/","title":"Configure events via Google Tag Manager","text":"<p>The DataLayer Guard normally scrapes your website to retrieve all relevant dataLayer events. But for some events this is not possible. Therefore we developed this fallback method which can be implemented via for example Google Tag Manager.</p> <p>For example usefull for the following interactions: - Purchases - Logging in - Creating a new account - Saving or removing favourites when logged in</p>"},{"location":"datalayer-guard/events-tag-manager/#implementation-in-google-tag-manager","title":"Implementation in Google Tag Manager","text":""},{"location":"datalayer-guard/events-tag-manager/#1-create-a-new-tag","title":"1. Create a new tag","text":"<ol> <li>Add a new custom HTML tag to the container<ol> <li>Give this tag a name, for example 'Code Cube - DataLayer Guard'</li> </ol> </li> <li>Add the script below in the empty HTML tag</li> </ol> <pre><code>&lt;script&gt;\nvar data = JSON.stringify({\n  \"client_name\": \"dataset_name\",\n  \"url\": {{Page URL}},\n  \"timestamp\": Date.now(),\n  \"dataLayer\": {{JS - dataLayer}}\n});\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://purchase-event-receiver-6k3dd6vtka-ew.a.run.app/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\nxhr.send(data);\n&lt;/script&gt; \n\n</code></pre> <ol> <li>There are a couple of variables that you do need to add configure.<ol> <li>\"client_name\": Can be found in the configuration page</li> <li>url: Make sure that you have the built-in variabele \"Page URL\" enabled in your container</li> <li>dataLayer: Create a new custom javaScript variabele in your tag container<ol> <li>Give the variabele the name 'JS - dataLayer'</li> <li>Add the script below in the custom javaScript variabele</li> </ol> </li> </ol> </li> </ol> <pre><code>\nfunction(){\nvar dataLayer = JSON.stringify(window.dataLayer)\nreturn dataLayer;\n }\n\n </code></pre>"},{"location":"datalayer-guard/events-tag-manager/#2-add-the-trigger-to-the-tag","title":"2. Add the trigger to the tag","text":"<ol> <li>Add the custom event trigger to the tag based on the dataLayer event name.</li> <li>Firing the dataLayer monitor for 10% of the events is mostly enough.<ol> <li>Add the following rule: Random number ends with 1</li> </ol> </li> </ol>"},{"location":"datalayer-guard/events-tag-manager/#3-test-your-changes-in-the-preview-mode-and-publish","title":"3. Test your changes in the preview mode and publish","text":"<p>Most important is to make sure the variabele {{JS - dataLayer}} contains the right dataLayer object that you would like to monitor.</p>"},{"location":"site-speed-monitoring/site_speed/","title":"Site speed","text":""},{"location":"site-speed-monitoring/site_speed/#product-description","title":"Product Description","text":"<p>The Sitespeed Monitor checks the website performance by taking snapshots during the page load and collect the data of various metrics such as requests count, third party requests data, cumulative layout shift, CSS files and scripts loading time e.t.c. By the end of the checkup the overall score will be calculated to show overall performance score from 0 to 100.</p>"},{"location":"site-speed-monitoring/site_speed/#how-it-works","title":"How it works","text":"<p>To set the configuration user must fill out the configuration form on Code Cube Portal for customers.</p> <p>Steps needed for complete the implementation: 1. Select the checkup frequency (how many times per day should we run checkups) 2. Set the list of emails which should be notified about the results 3. Turn on the slack alerts as well if it's needed</p>"},{"location":"tag-monitor/a-tag-monitor/","title":"Product Description","text":""},{"location":"tag-monitor/a-tag-monitor/#product-description_1","title":"Product Description","text":"<p>This repository contains the Tag Monitor source code and terraform documents. Tag Monitor uses Google Tag Management which is a tag delivery system that allows you to quickly and easily update measurement codes and related code fragments (collectively known as tags) on a website or mobile app. Tag monitoring will allow you to understand if important tags are actually firing for real users and see when they break down in a well formatted table. </p>"},{"location":"tag-monitor/a-tag-monitor/#how-it-works","title":"How it works","text":"<p>The key deliverable of Tag monitor is a BigQuery view that collects data from a website. This is supported by a Cloud Function that collects the pixel and stores it into BigQuery. The data will be sent by way of a new Google Tag Manager custom template, and it will comprise statistics of all the tags (or a random portion of it) that have fired on the website for any given dataLayer event.</p> <p></p> <p>The basic setup of the monitor collects the following metadata from each dataLayer event: - Event name and timestamp (to uniquely distinguish events with the same name from each other). - Tag ID, name, firing status, and execution time for every tag that fired for that event (or null if no tags fired for the event).</p> <p>This solution can be easily extended to include other metadata, like container ID, domain etc.</p>"},{"location":"tag-monitor/consent-monitoring/","title":"Enable Consent Monitoring","text":"<p>\u26a0\ufe0f This feauture is only available for the Tag Monitor Premium, Enterprise or Agency licenses.</p>"},{"location":"tag-monitor/consent-monitoring/#changes-in-google-tag-manager","title":"Changes in Google Tag Manager","text":""},{"location":"tag-monitor/consent-monitoring/#retrieve-variables-to-retrieve-the-consent-status","title":"Retrieve variables to retrieve the consent status","text":"<ol> <li> <p>Install the variable template 'GTM Consent State' in your GTM container.</p> </li> <li> <p>Create new variables, one for each consent status to monitor. Often two variables for 'analytics_storage' and 'ad_storage' are enough.</p> </li> </ol>"},{"location":"tag-monitor/consent-monitoring/#add-parameters-to-the-tags-where-consent-should-be-monitored","title":"Add parameters to the tags where consent should be monitored.","text":"<ol> <li> <p>Google Analytics: Add a parameter value and key to every GA4 event (tip: add these parameters via a standard 'Event settings variable'). </p> </li> <li> <p>The parameter name should be 'consent_ad_storage' or 'consent_analytics_storage'.</p> </li> <li> <p>The parameter value should be the matching variables that you've just added to the container.</p> </li> <li> <p>Google Ads: In the Remarketing tag custom parameters can be added via the option 'Manually Specify'</p> </li> <li> <p>The parameter key should be 'consent_ad_storage' or 'consent_analytics_storage'.</p> </li> <li> <p>The parameter value should be the matching variables that you've just added to the container.</p> </li> <li> <p>Microsoft Ads: All event tracking tags give the opportunity to add extra event data via the table option. </p> </li> <li> <p>The name should be 'consent_ad_storage' or 'consent_analytics_storage'.</p> </li> <li>The value should be the matching variables that you've just added to the container.</li> </ol>"},{"location":"tag-monitor/consent-monitoring/#link-the-tags-and-parameters-to-the-code-cube-tag-monitor-template","title":"Link the tags and parameters to the Code Cube Tag Monitor template.","text":"<ol> <li>When you open a tag in a new tab, the Tag ID will be available in the url, after /tags/. For example, 4175 is the tag ID in the example URL below.</li> </ol> <p>https://tagmanager.google.com/#/container/accounts/112031/containers/126673/workspaces/1000716/tags/4175</p> <ol> <li>In the Code Cube Tag Monitor tag (premium template) add the list of tag ID's with the consent variable and the given label (consent_analytics_storaga) for example.</li> </ol>"},{"location":"tag-monitor/error-monitoring-client-side/","title":"Google Tag Manager Client-Side: Configuring Tag Monitor","text":"<p>This guide will walk you through the steps to set up the Tag Monitor within your Google Tag Manager client-side container.</p>"},{"location":"tag-monitor/error-monitoring-client-side/#configuration-in-the-google-tag-manager-container","title":"Configuration in the Google Tag Manager Container","text":""},{"location":"tag-monitor/error-monitoring-client-side/#importing-custom-template","title":"Importing Custom Template","text":"<p>1. Download Template: Visit the Tag Monitor configuration page and download the Tag Monitor template. (Ensure you're logged into our portal.)</p> <p>2. Add Template to Google Tag Manager: Open your Google Tag Manager container. Navigate to \"Templates\" and click on \"New\" in the \"Tag Templates\" section.</p> <p></p> <p>3. Import Template</p> <ul> <li>Click on the three dots in the top-right corner and select \"Import\".</li> <li>Choose the Tag Monitor template you've downloaded and click \"Save\". No adjustments to the template are necessary.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-client-side/#configuring-the-code-cube-tag-monitor-tag","title":"Configuring the Code Cube Tag Monitor Tag","text":"<p>4. Create New Tag: Under \"Tags\" in the menu, create a new tag.</p> <p>5. Select Tag Monitor Template: Choose the Tag Monitor Template as the tag type.  </p> <p></p> <p>6. Configure Settings: </p> <ul> <li>Database Name: Retrieve from the configuration page in the portal under 'client-side error monitoring'.</li> <li>Add Metadata: Set the following key/parameter pair via \"Additional Tag Meta\":<ul> <li>Key: <code>exclude</code></li> <li>Parameter: <code>true</code></li> </ul> </li> <li>Consent: Set to 'No additional consent required'.  </li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-client-side/#adding-trigger-to-the-tag","title":"Adding Trigger to the Tag","text":"<p>7. Create Trigger: Create a trigger for a custom event where the event name equals <code>.*</code> (using regex matching). This ensures the monitor tag fires for every single dataLayer event.  </p> <p></p> <p>8. Limit Tag Monitor Fires:  </p> <ul> <li>Choose \"Some custom events\" and select \"Random Number\" from the first dropdown menu.</li> <li>For 10% of events, select: \"Random number ends with 1\".</li> <li>For other cases, calculate the expected percentage from 2,147,483,647 (Random Number value) and fire the tag accordingly.</li> </ul>"},{"location":"tag-monitor/error-monitoring-client-side/#update-all-your-tags-to-include-tag-name","title":"Update all your tags to include Tag Name","text":"<p>9. Update meta data in all tags</p> <ul> <li>For each tag, expand \"Advanced Settings\" and check the \"Include tag name\" checkbox under \"Additional Tag Metadata\". Set the key name to \"name\" as well.</li> <li>If dealing with a large number of tags, follow these steps to update them.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-client-side/#final-steps-going-live","title":"Final Steps: Going Live","text":"<p>10. Publish Container:  </p> <ul> <li>Publish your Tag Manager container to your production environment.</li> </ul> <p>11. Access Tag Monitor Dashboard:  </p> <p>Access your Tag Monitor dashboard in the Portal provided by us. Data should now automatically populate.</p>"},{"location":"tag-monitor/error-monitoring-client-side/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Monitor.</p>"},{"location":"tag-monitor/error-monitoring-server-side/","title":"Google Tag Manager server-side: Configuring Tag Monitor","text":"<p>This guide will walk you through the steps to set up the Tag Monitor within your Google Tag Manager server-side container.</p>"},{"location":"tag-monitor/error-monitoring-server-side/#configuration-in-the-google-tag-manager-container","title":"Configuration in the Google Tag Manager Container","text":""},{"location":"tag-monitor/error-monitoring-server-side/#importing-custom-template","title":"Importing Custom Template","text":"<p>1. Download Template: Visit the Tag Monitor configuration page and download the Tag Monitor template. (Ensure you're logged into our portal.)</p> <p>2. Add Template to Google Tag Manager: Open your Google Tag Manager container. Navigate to \"Templates\" and click on \"New\" in the \"Tag Templates\" section.</p> <p></p> <p>3. Import Template</p> <ul> <li>Click on the three dots in the top-right corner and select \"Import\".</li> <li>Choose the Tag Monitor template you've downloaded and click \"Save\". No adjustments to the template are necessary.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-server-side/#configuring-the-code-cube-tag-monitor-tag","title":"Configuring the Code Cube Tag Monitor Tag","text":"<p>4. Create New Tag: Under \"Tags\" in the menu, create a new tag.</p> <p>5. Select Tag Monitor Template: Choose the Tag Monitor Template as the tag type.  </p> <p>6. Configure Settings: </p> <ul> <li>Database Name: Retrieve from the configuration page in the portal under 'client-side error monitoring'.</li> <li>** Table Name**: Retrieve from the configuration page in the portal under 'client-side error monitoring'.</li> <li>Add Metadata: Set the following key/parameter pair via \"Additional Tag Meta\":<ul> <li>Key: <code>exclude</code></li> <li>Parameter: <code>true</code></li> </ul> </li> <li>Consent: Set to 'No additional consent required'.  </li> </ul>"},{"location":"tag-monitor/error-monitoring-server-side/#adding-trigger-to-the-tag","title":"Adding Trigger to the Tag","text":"<p>7. Create Trigger: Create a trigger for a custom event where the event name equals <code>.*</code> (using regex matching). This ensures the monitor tag fires for every single dataLayer event.  </p> <p></p> <p>8. Limit Tag Monitor Fires:  </p> <ul> <li>Choose \"Some custom events\" and select \"Random Number\" from the first dropdown menu.</li> <li>For 10% of events, select: \"Random number ends with 1\".</li> <li>For other cases, calculate the expected percentage from 2,147,483,647 (Random Number value) and fire the tag accordingly.</li> </ul>"},{"location":"tag-monitor/error-monitoring-server-side/#update-all-your-tags-to-include-tag-name","title":"Update all your tags to include Tag Name","text":"<p>9. Update meta data in all tags</p> <ul> <li>For each tag, expand \"Advanced Settings\" and check the \"Include tag name\" checkbox under \"Additional Tag Metadata\". Set the key name to \"name\" as well.</li> <li>If dealing with a large number of tags, follow these steps to update them.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-server-side/#final-steps-going-live","title":"Final Steps: Going Live","text":"<p>10. Publish Container:  </p> <ul> <li>Publish your Tag Manager container to your production environment.</li> </ul> <p>11. Access Tag Monitor Dashboard:  </p> <p>Access your Tag Monitor dashboard in the Portal provided by us. Data should now automatically populate.</p>"},{"location":"tag-monitor/error-monitoring-server-side/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Monitor.</p>"},{"location":"tag-monitor/raw-offload-bigquery/","title":"Manage access to raw Tag Monitoring data in BigQuery","text":"<p>To offload BigQuery data from one project to another, we'll create a scheduled query managed by a service account.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#managing-access-to-the-data","title":"Managing access to the data","text":""},{"location":"tag-monitor/raw-offload-bigquery/#create-a-service-account","title":"Create a service account","text":"<ol> <li>In the Google Cloud console, go to the Create service account page.</li> <li>Select your Google Cloud Project.</li> <li>Enter a name for the service account. The Google Cloud console generates a service account ID based on this name. Edit the ID if necessary. You cannot change the ID later.</li> <li>Assign the BigQuery User IAM role.</li> <li>Click Done to finish creating the service account.</li> </ol>"},{"location":"tag-monitor/raw-offload-bigquery/#managing-access-rights","title":"Managing access rights","text":"<p>Share the service account ID with your contact at Code Cube to confirm proper access rights management.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#setting-up-bigquery-datasets-and-tables","title":"Setting Up BigQuery datasets and tables","text":""},{"location":"tag-monitor/raw-offload-bigquery/#create-the-dataset","title":"Create the dataset","text":"<ol> <li>Open the BigQuery page in the Google Cloud console.</li> <li>In the Explorer panel, select the project where you want to create the dataset.</li> <li>Expand the Actions option and select 'Create dataset'.</li> <li>Enter a unique dataset name (e.g., 'codecube-tagmonitor').</li> <li>Select multi-region and EU for the location type.</li> <li>Click Create dataset.</li> </ol>"},{"location":"tag-monitor/raw-offload-bigquery/#create-the-table-for-client-side-monitoring","title":"Create the table for client-side monitoring","text":"<ol> <li>Select the new dataset and click 'Create table'</li> <li>Choose 'Empty table' as the table type.</li> <li>Select your GCP project and newly created dataset, gave it an descriptive name like 'raw_data_client'.</li> <li> <p>Define the table schema as follows:    </p> <pre><code>| Field name        | Type      | Mode |\n| :---------------- | --------- | --------\n| timestamp         | Title     |\n| initial_url       | STRING    | NULLABLE\n| url               | STRING    | NULLABLE\n| event_name        | STRING    | NULLABLE\n| event_timestamp   | STRING    | NULLABLE\n| container_version | STRING    | NULLABLE\n| container_id      | STRING    | NULLABLE\n| tag               | RECORD    | REPEATED\n| id                | STRING    | NULLABLE\n| name              | STRING    | NULLABLE\n| status            | STRING    | NULLABLE\n| channel           | STRING    | NULLABLE\n| execution_time    | STRING    | NULLABLE\n| parameters        | STRING    | REPEATED\n| key               | STRING    | NULLABLE\n| value               | STRING    | NULLABLE\n</code></pre> </li> <li> <p>Partitioning: Select 'No partitioning'</p> </li> <li>Click on Create table</li> </ol>"},{"location":"tag-monitor/raw-offload-bigquery/#create-the-table-for-server-side-monitoring","title":"Create the table for server-side monitoring","text":"<ol> <li>Select the new dataset and click 'Create table'</li> <li>Choose 'Empty table' as the table type.</li> <li>Select your GCP project and newly created dataset, gave it an descriptive name like 'raw_data_server'.</li> <li> <p>Define the table schema as follows:    </p> <pre><code>| Field name        | Type      | Mode |\n| :---------------- | --------- | --------\n| timestamp         | Title     |\n| url               | STRING    | NULLABLE\n| event_name        | STRING    | NULLABLE\n| event_timestamp   | STRING    | NULLABLE\n| client_name       | STRING    | NULLABLE\n| container_version | STRING    | NULLABLE\n| container_id      | STRING    | NULLABLE\n| env_name          | STRING    | NULLABLE\n| tag               | RECORD    | REPEATED\n| id                | STRING    | NULLABLE\n| name              | STRING    | NULLABLE\n| status            | STRING    | NULLABLE\n| execution_time    | STRING    | NULLABLE\n| parameters        | STRING    | REPEATED\n| key               | STRING    | NULLABLE\n| value               | STRING    | NULLABLE\n</code></pre> </li> <li> <p>Partitioning: Select 'No partitioning'</p> </li> <li>Click on Create table</li> </ol>"},{"location":"tag-monitor/raw-offload-bigquery/#creating-queries-and-scheduled-jobs","title":"Creating queries and scheduled jobs","text":""},{"location":"tag-monitor/raw-offload-bigquery/#creating-queries","title":"Creating Queries","text":"<p>Write queries to retrieve client-side and server-side data.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#client-side-data","title":"Client-side data","text":"<pre><code>SELECT * FROM `code-cube.{{dataset_name}}.raw_data_client`\nWHERE DATE(timestamp) = DATE(DATE_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY))\n</code></pre>"},{"location":"tag-monitor/raw-offload-bigquery/#server-side-data","title":"Server-side data","text":"<pre><code>SELECT * FROM `code-cube.{{dataset_name}}.raw_data_server`\nWHERE DATE(timestamp) = DATE(DATE_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY))\n</code></pre> <p>The {{dataset}} name is equal to the dataset name shown on the Tag Monitor configuration page.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#create-the-scheduled-query","title":"Create the scheduled query","text":"<p>Set up scheduled queries to automate data retrieval.</p> <ol> <li>Provide details and schedule for the query (once a day)</li> <li>Add destination details for query results.</li> <li>Add the service account</li> <li>Save the settings</li> </ol>"},{"location":"tag-monitor/serverside-error-logging/","title":"Server-side GTM Logging","text":"<p>To provide additional information on error occurrences in the Tag Monitor, it is important to enable logging configurations to provision a table with available and relevant data. This document serves as a short implementation guide on setting up the necessary Logging Sink.</p>"},{"location":"tag-monitor/serverside-error-logging/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Requirements</li> <li>Log Router Setup [Personal Access]</li> <li>External Project Permissions</li> </ol>"},{"location":"tag-monitor/serverside-error-logging/#requirements","title":"Requirements","text":"<ul> <li>Utilisation of the <code>logToConsole()</code> API within the sGTM container, messages passed to this method are outputted in the stdout stacktrace. This is where the server logs will be recorded.</li> <li>Access to the client\u2019s cloud project.</li> <li>Writing permissions to the relevant Code Cube dataset for the client\u2019s <code>logging.iam.gserviceaccount.com</code> service account.</li> </ul>"},{"location":"tag-monitor/serverside-error-logging/#log-router-setup","title":"Log Router Setup","text":"<ol> <li>Navigate to the Log router page, found under Logging \u2192 Log router.</li> </ol> <ol> <li>Click on Create sink.</li> </ol> <p>This will open a new interface, where the relevant destinations, services, and logging filters are submitted.</p> <ol> <li>Give the router an appropriate name and description.</li> <li>Configure the destination as a BigQuery dataset, and subsequently select Use a BigQuery dataset in another project.</li> </ol> <p></p> <ol> <li> <p>The service and destination will be converted to the format as seen in the image below. Make sure to add <code>[PROJECT_ID]</code> as 'code-cube' and <code>[DATASET_ID]</code> is equal to the dataset name shown on the Tag Monitor configuration page.</p> </li> <li> <p>In the log filters, input the following query:</p> <p><code>logName=~\"stdout\" AND textPayload!~\"https://www.googletagmanager.com/sgtm/a\" AND textPayload!~\"Listening\"</code></p> <ul> <li>Explanation:</li> <li><code>logName=~\"stdout\"</code>: Filter logs based on stdout.</li> <li><code>textPayload!~\"https://www.googletagmanager.com/sgtm/a\"</code>: Exclude GTM analytics pings.</li> <li><code>textPayload!~\"Listening\"</code>: Exclude instance initializations.</li> </ul> </li> <li> <p>Keep in mind that further refinement is possible by adding more filters, however, be sure to test these in the logs explorer before applying. A faulty or unreturning filter will cause the sink to stop writing logs.</p> </li> </ol>"},{"location":"tag-monitor/serverside-error-logging/#external-project-permissions","title":"External Project Permissions","text":"<p>The creation of a logging sink generates a new service account in your GCP project. It is necessary for Code Cube to hav writing permissions on the BigQuery dataset, where the logs will be stored. Please make sure to locate this service account and share the name with your contact at Code Cube.</p> <p>How to find the service account; - This service account is found under IAM and admin \u2192 IAM. - On the Top right of this page, enable the inclusion of Google-provided role grants. - Look for the service account that ends with <code>-logging.iam.gserviceaccount.com</code>. - Copy the name of this service account, this will be assigned writing permissions on the relevant dataset.</p>"},{"location":"tag-monitor/tag-bulk-edit/","title":"Tag Bulk Edit","text":""},{"location":"tag-monitor/tag-bulk-edit/#update-all-your-tags-to-include-the-tag-name-in-the-meta-data","title":"Update all your tags to include the tag name in the meta data","text":"<p>In cases when many GTM tags need to be updated for proper functioning of the Tag Monitor and in order to avoid hours of manual and repetitive work, this guide might be useful.  Steps to bulk edit your tags:                     </p> <ol> <li> <p>Export your GTM containerunder Admin -&gt; Export Container -&gt; YOUR WORKSPACE -&gt; Export.                         </p> </li> <li> <p>Open the downloaded container file in an advanced text editor (like notepad++) and locate the tags block.                      </p> </li> <li> <p>Open a json file named 'tags.json' and paste the tag block into it (wrap the whole tag block in {}) and save it.                          </p> <pre><code>{\n\"tag\": []\n}\n</code></pre> </li> <li> <p>In VSCode, open an html file and paste the code below into the file.                  </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;meta name=\"description\" content=\"\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"\"&gt;\n    &lt;/head&gt;\n    &lt;script&gt;\n        window.onload = (event) =&gt; {\n            function readSingleFile(evt) {\n                var f = evt.target.files[0];\n                if (f) {\n                    const r = new FileReader();\n                    r.onload = function(e) {\n                        const contents = e.target.result;\n                        const json = JSON.parse(contents);\n                        let beforeCount = 0;\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey ? beforeCount++ : undefined);\n\n                        console.log(`We have ${beforeCount} properties in ${json.tag.length} tags`);\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey === undefined ? el.monitoringMetadataTagNameKey = \"name\" : undefined);\n\n                        let afterCount = 0;\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey ? afterCount++ : undefined);\n\n                        console.log(`Now we have ${afterCount} properties in ${json.tag.length} tags after the script work done!`);\n\n                        navigator.clipboard.writeText(JSON.stringify(json.tag));\n\n                        alert('Job done! Now you can do Ctrl+V and change the data anywhere you want!')\n                    }\n                    r.readAsText(f);\n                } else {\n                    alert(\"Failed to load file\");\n                }\n            }\n\n            document.getElementById('fileinput').addEventListener('change', readSingleFile, false);\n        }\n    &lt;/script&gt;\n    &lt;body&gt;\n        &lt;input id=\"fileinput\" type=\"file\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Run the browser and choose the tags.json file in the input field and, wait until you receive an alert message saying that the job is done. Now the modified tag block is copied into your clipboard. </p> </li> <li>Format the code block here to the standard Json format.</li> <li>Replace the old tag block in the downloaded container file with your updated and formatted block (be mindful of the correct punctuation) and save the file;</li> <li>Import container into your workspace under Admin -&gt; Import Container -&gt; choose container file and workspace -&gt; Merge.</li> </ol> <p>You're done. All your tags have been updated!</p>"},{"location":"tag-monitor/tag-inactivity/","title":"Tag Inactivity Monitoring","text":""},{"location":"tag-monitor/tag-inactivity/#product-description","title":"Product Description","text":"<p>Tag Inactivity Monitoring is a solution designed to help users monitor important tags, such as conversion tags, and receive timely notifications when the tag does not fire for more than an hour. This solution is useful for ensuring that critical tags are working properly, and for quickly identifying issues that may be impacting business operations.</p> <p>The Tag Inactivity Monitoring solution sends notifications to users via email or Slack, informing them that the tag has not fired and providing details on the last time the tag was fired. This allows users to easily spot and troubleshoot the issue. The solution is available for use from 8:00 AM to 8:00 PM, making it an ideal tool for businesses that operate during regular business hours.</p> <p>Overall, the Tag Inactivity Monitoring solution provides an easy-to-use, convenient way for businesses to monitor critical tags and quickly identify issues that may be impacting their operations.</p>"},{"location":"tag-monitor/tag-inactivity/#implementation","title":"Implementation","text":"<p>To implement the Tag Inactivity Monitoring solution, users must fill out a configuration form on the Code Cube portal. Once the form is submitted, we will take care of the rest, setting up the solution to monitor the specified tag and sending notifications as needed.</p>"},{"location":"tag-monitor/tag-inactivity/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Inactivity.</p>"}]}