{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Code Cube Documentation!","text":"<p>Welcome to the official documentation hub for Code Cube. Here, you'll find comprehensive guides, tutorials, and reference materials to help you make the most out of our products and services.</p>"},{"location":"#tag-monitoring","title":"Tag Monitoring","text":"<p>Explore how to configure and manage your tag monitoring setup with Code Cube:</p> <ul> <li>\u2692\ufe0f Configuration - Client-side: Learn how to configure client-side error monitoring.</li> <li>\u2692\ufe0f Configuration - Server-side: Configure server-side error monitoring for your applications.</li> <li>Bulk Editing Tags in GTM: Learn how to perform bulk editing of tags in Google Tag Manager.</li> <li>Enabling Tag Inactivity: Discover how to enable tag inactivity monitoring to optimize tag performance.</li> <li>Offload to Own BigQuery Environment: Offload tag monitoring data to your own BigQuery environment for analysis.</li> <li>Consent Monitoring: Implement consent monitoring to ensure compliance with data privacy regulations.</li> <li>Server-side Error Logging: Set up server-side error logging to capture and analyze errors in your applications.</li> </ul>"},{"location":"#datalayer-guard","title":"DataLayer Guard","text":"<p>Learn how to monitor events via Tag Management with DataLayer Guard:</p> <ul> <li>Monitoring Events via Tag Manager: Utilize DataLayer Guard to monitor events efficiently through Tag Manager integration.</li> </ul>"},{"location":"#contact-us","title":"Contact Us","text":"<p>Have questions or feedback? Contact our team:</p> <p>Email: support@code-cube.io</p>"},{"location":"notifications/","title":"Enable Notifications","text":""},{"location":"notifications/#configuring-monitoring-notifications","title":"Configuring Monitoring Notifications","text":"<p>To enable monitoring notifications for our products, you can access our portal and navigate to the configuration pages of each product such as Tag Monitor, Datalayer Guard or Sitespeed Monitor. From there, select your desired method of receiving notifications based on your subscription model, such as Email, Slack, or Teams. Fill in the required fields accordingly for each method. Follow the steps below accoring to your desired method:</p>"},{"location":"notifications/#email-notifications","title":"Email Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable email updates.</li> <li>Provide the email addresses where you wish to receive the notifications.</li> </ol>"},{"location":"notifications/#slack-notifications","title":"Slack Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable Slack updates.</li> <li>Open your Slack Workspace and copy the workspace ID by clicking on the workspace name.  </li> <li>Paste the workspace ID into the corresponding field in the configuration page and save the form.</li> <li>You will be prompted to log in to your workspace and authorize our app.</li> <li>After authorizing the app, add it to your workspace by clicking the add apps button and selecting the app.</li> <li>Invite the app to the desired channel where you want to receive the notifications by clicking on the channel name, going to the integrations tab and, adding the app.</li> </ol>"},{"location":"notifications/#teams-notifications","title":"Teams Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable Teams updates.</li> <li>Follow these steps to create an incoming webhook for the channel where you want to receive the notifications.</li> <li>Copy the generated Webhook URL and paste it into the corresoinding field and save the form.</li> </ol>"},{"location":"datalayer-guard/events-tag-manager/","title":"Configure events via Google Tag Manager","text":"<p>The DataLayer Guard normally scrapes your website to retrieve all relevant dataLayer events. But for some events this is not possible. Therefore we developed this fallback method which can be implemented via for example Google Tag Manager.</p> <p>For example usefull for the following interactions: - Purchases - Logging in - Creating a new account - Saving or removing favourites when logged in</p>"},{"location":"datalayer-guard/events-tag-manager/#implementation-in-google-tag-manager","title":"Implementation in Google Tag Manager","text":""},{"location":"datalayer-guard/events-tag-manager/#1-create-a-new-tag","title":"1. Create a new tag","text":"<ol> <li>Add a new custom HTML tag to the container<ol> <li>Give this tag a name, for example 'Code Cube - DataLayer Guard'</li> </ol> </li> <li>Add the script below in the empty HTML tag</li> </ol> <pre><code>&lt;script&gt;\nvar data = JSON.stringify({\n  \"client_name\": \"dataset_name\",\n  \"url\": {{Page URL}},\n  \"timestamp\": Date.now(),\n  \"dataLayer\": {{JS - dataLayer}}\n});\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"endpoint-url\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\nxhr.send(data);\n&lt;/script&gt; \n\n</code></pre> <ol> <li>There are a couple of variables that you do need to add configure.<ol> <li>\"client_name\": Can be found in the configuration page</li> <li>url: Make sure that you have the built-in variabele \"Page URL\" enabled in your container</li> <li>dataLayer: Create a new custom javaScript variabele in your tag container<ol> <li>Give the variabele the name 'JS - dataLayer'</li> <li>Add the script below in the custom javaScript variabele</li> </ol> </li> <li>endpoint-url : This is the URL of our service endpoint and will be shared with you privately.</li> </ol> </li> </ol> <pre><code>\nfunction(){\nvar dataLayer = JSON.stringify(window.dataLayer)\nreturn dataLayer;\n }\n\n </code></pre>"},{"location":"datalayer-guard/events-tag-manager/#2-add-the-trigger-to-the-tag","title":"2. Add the trigger to the tag","text":"<ol> <li>Add the custom event trigger to the tag based on the dataLayer event name.</li> <li>Firing the dataLayer monitor for 10% of the events is mostly enough.<ol> <li>Add the following rule: Random number ends with 1</li> </ol> </li> </ol>"},{"location":"datalayer-guard/events-tag-manager/#3-test-your-changes-in-the-preview-mode-and-publish","title":"3. Test your changes in the preview mode and publish","text":"<p>Most important is to make sure the variabele {{JS - dataLayer}} contains the right dataLayer object that you would like to monitor.</p>"},{"location":"datalayer-guard/intro/","title":"The DataLayer Guard","text":"<p>Code Cube's DataLayer Guard keeps a constant eye on your website's dataLayer. Any changes or errors within the dataLayer triggeLayer Guard to send a notification, based on preconfigured templates within the Code Cube portal. The DataLayer Guard conducts website monitoring hourly or daily, depending on your license.</p> <p>The dataLayer contains all information used to pass data from your website to Tag Manager. A broken dataLayer causes the loss of valuable marketing- and analytics data and missing out on important insights.</p> <p>Quick links</p> <ul> <li>Configuration via scraper</li> <li>Configuration via Tag Manager.</li> </ul>"},{"location":"datalayer-guard/intro/#how-does-it-work","title":"How does it work? \ud83d\udd0e","text":"<p>At Code Cube, we use two methods for dataLayer monitoring: the DataLayer Guard Scraper and integration with (Google) Tag Manager.</p>"},{"location":"datalayer-guard/intro/#monitoring-via-custom-scraper","title":"Monitoring via custom scraper","text":"<p>The DataLayer Guard acts as a scraper, continuously visiting your website, navigating through it, and performing various interactions based on predefined templates set up via the configuration page in the portal.</p> <p>Most dataLayer events can be monitored with this setup, without the need for additional configurations via frontend or Tag Management systems. This autonomy from development and external scripts is one of the setup's significant advantages.</p> <p>Within the scraper, two types of events are defined. </p> <p>Page load events: These events trigger directly upon page load, requiring no user interactions. Examples include pageview events. Once added to the configuration page, page load events are promptly inspected during the next DataLayer Guard run.</p> <p>Interaction events: These events require performing actions on the page, such as clicking on elements, filling in input fields, selecting options from a list, adding a product to the cart. Interaction events may take up to a maximum of 24 hours to be fully inspected by the DataLayer Guard.</p> <p>How to configure </p>"},{"location":"datalayer-guard/intro/#monitoring-via-google-tag-manager","title":"Monitoring via (Google) Tag Manager","text":"<p>Certain events, like those requiring user authentication, email subscriptions, or completing purchases on the website, cannot be captured through scraping. For such scenarios, we've devised a fallback method via Google Tag Manager.</p> <p>How to configure </p>"},{"location":"datalayer-guard/scraped-events/","title":"Monitoring via scraped events","text":""},{"location":"datalayer-guard/scraped-events/#configuring-datalayer-events-for-monitoring","title":"Configuring dataLayer Events for Monitoring","text":"<p>This guide will walk you through configuring dataLayer events to be monitored by DataLayer Guard. Before you begin, ensure you have access to our portal and have a list of events you want to monitor.</p>"},{"location":"datalayer-guard/scraped-events/#adding-events","title":"Adding Events","text":"<p>To add events for monitoring, follow these steps:</p> <ol> <li>Navigate to the DataLayer Guard configuration page.</li> <li>Prepare the list of events you want to be monitored.</li> <li>Click on the <code>Monitoring via scraped events</code> tab.</li> <li>Click on the <code>Add event</code> button.</li> <li>Enter the event name in the corresponding field.</li> <li> <p>For adding the events you have two options:</p> <ul> <li>Add the entire event in valid JSON format:<ul> <li>Click on the <code>Add JSON</code> button and paste the entire event. The event will be displayed in the event table, enabling you to edit, add, and remove fields easily.</li> </ul> </li> <li>Add events field by field:<ul> <li>Enter the parameter name in the \"Parameter\" field.</li> <li>Select the type of value. Note: for nested arrays or objects, select the array or object type accordingly.</li> <li>Specify if the value is required or not.</li> <li>Determine if the value should match a specific value or if it can be dynamic.</li> <li>Enter the value or an example of the value (if dynamic) in the \"Value\" field.</li> <li>Click the add icon at the end of the row to add more parameters and rows.</li> </ul> </li> </ul> </li> <li> <p>Define how the event is triggered from the <code>How does this event fire</code> dropdown.</p> </li> <li>Specify the URL on which the event can be found.</li> <li>If the event is an interaction event, define the trigger element for the event.</li> <li>Hit the save button to save the event.</li> </ol>"},{"location":"datalayer-guard/scraped-events/#watch-the-video-below-to-learn-how-to-add-the-events","title":"Watch the video below to learn how to add the events","text":"Your browser does not support the video tag."},{"location":"site-speed-monitoring/site_speed/","title":"Site speed","text":""},{"location":"site-speed-monitoring/site_speed/#product-description","title":"Product Description","text":"<p>The Sitespeed Monitor checks the website performance by taking snapshots during the page load and collect the data of various metrics such as requests count, third party requests data, cumulative layout shift, CSS files and scripts loading time e.t.c. By the end of the checkup the overall score will be calculated to show overall performance score from 0 to 100.</p>"},{"location":"site-speed-monitoring/site_speed/#how-it-works","title":"How it works","text":"<p>To set the configuration user must fill out the configuration form on Code Cube Portal for customers.</p> <p>Steps needed for complete the implementation: 1. Select the checkup frequency (how many times per day should we run checkups) 2. Set the list of emails which should be notified about the results 3. Turn on the slack alerts as well if it's needed</p>"},{"location":"tag-monitor/a-tag-monitor/","title":"Product Description","text":""},{"location":"tag-monitor/a-tag-monitor/#product-description_1","title":"Product Description","text":"<p>This repository contains the Tag Monitor source code and terraform documents. Tag Monitor uses Google Tag Management which is a tag delivery system that allows you to quickly and easily update measurement codes and related code fragments (collectively known as tags) on a website or mobile app. Tag monitoring will allow you to understand if important tags are actually firing for real users and see when they break down in a well formatted table. </p>"},{"location":"tag-monitor/a-tag-monitor/#how-it-works","title":"How it works","text":"<p>The key deliverable of Tag monitor is a BigQuery view that collects data from a website. This is supported by a Cloud Function that collects the pixel and stores it into BigQuery. The data will be sent by way of a new Google Tag Manager custom template, and it will comprise statistics of all the tags (or a random portion of it) that have fired on the website for any given dataLayer event.</p> <p></p> <p>The basic setup of the monitor collects the following metadata from each dataLayer event: - Event name and timestamp (to uniquely distinguish events with the same name from each other). - Tag ID, name, firing status, and execution time for every tag that fired for that event (or null if no tags fired for the event).</p> <p>This solution can be easily extended to include other metadata, like container ID, domain etc.</p>"},{"location":"tag-monitor/consent-monitoring/","title":"Enable Consent Monitoring","text":"<p>\u26a0\ufe0f This feauture is only available for the Tag Monitor Premium, Enterprise or Agency licenses.</p>"},{"location":"tag-monitor/consent-monitoring/#changes-in-google-tag-manager","title":"Changes in Google Tag Manager","text":""},{"location":"tag-monitor/consent-monitoring/#retrieve-variables-to-retrieve-the-consent-status","title":"Retrieve variables to retrieve the consent status","text":"<ol> <li> <p>Install the variable template 'GTM Consent State' in your GTM container.</p> </li> <li> <p>Create new variables, one for each consent status to monitor. Often two variables for 'analytics_storage' and 'ad_storage' are enough.</p> </li> </ol>"},{"location":"tag-monitor/consent-monitoring/#add-parameters-to-the-tags-where-consent-should-be-monitored","title":"Add parameters to the tags where consent should be monitored.","text":"<ol> <li> <p>Google Analytics: Add a parameter value and key to every GA4 event (tip: add these parameters via a standard 'Event settings variable'). </p> </li> <li> <p>The parameter name should be 'consent_ad_storage' or 'consent_analytics_storage'.</p> </li> <li> <p>The parameter value should be the matching variables that you've just added to the container.</p> </li> <li> <p>Google Ads: In the Remarketing tag custom parameters can be added via the option 'Manually Specify'</p> </li> <li> <p>The parameter key should be 'consent_ad_storage' or 'consent_analytics_storage'.</p> </li> <li> <p>The parameter value should be the matching variables that you've just added to the container.</p> </li> <li> <p>Microsoft Ads: All event tracking tags give the opportunity to add extra event data via the table option. </p> </li> <li> <p>The name should be 'consent_ad_storage' or 'consent_analytics_storage'.</p> </li> <li>The value should be the matching variables that you've just added to the container.</li> </ol>"},{"location":"tag-monitor/consent-monitoring/#link-the-tags-and-parameters-to-the-code-cube-tag-monitor-template","title":"Link the tags and parameters to the Code Cube Tag Monitor template.","text":"<ol> <li>When you open a tag in a new tab, the Tag ID will be available in the url, after /tags/. For example, 4175 is the tag ID in the example URL below.</li> </ol> <p>https://tagmanager.google.com/#/container/accounts/112031/containers/126673/workspaces/1000716/tags/4175</p> <ol> <li>In the Code Cube Tag Monitor tag (premium template) add the list of tag ID's with the consent variable and the given label (consent_analytics_storaga) for example.</li> </ol>"},{"location":"tag-monitor/error-monitoring-client-side/","title":"Google Tag Manager Client-Side: Configuring Tag Monitor","text":"<p>This guide will walk you through the steps to set up the Tag Monitor within your Google Tag Manager client-side container.</p>"},{"location":"tag-monitor/error-monitoring-client-side/#configuration-in-the-google-tag-manager-container","title":"Configuration in the Google Tag Manager Container","text":""},{"location":"tag-monitor/error-monitoring-client-side/#importing-custom-template","title":"Importing Custom Template","text":"<p>1. Download Template: Visit the Tag Monitor configuration page and download the Tag Monitor template. (Ensure you're logged into our portal.)</p> <p>2. Add Template to Google Tag Manager: Open your Google Tag Manager container. Navigate to \"Templates\" and click on \"New\" in the \"Tag Templates\" section.</p> <p></p> <p>3. Import Template</p> <ul> <li>Click on the three dots in the top-right corner and select \"Import\".</li> <li>Choose the Tag Monitor template you've downloaded and click \"Save\". No adjustments to the template are necessary.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-client-side/#configuring-the-code-cube-tag-monitor-tag","title":"Configuring the Code Cube Tag Monitor Tag","text":"<p>4. Create New Tag: Under \"Tags\" in the menu, create a new tag.</p> <p>5. Select Tag Monitor Template: Choose the Tag Monitor Template as the tag type.  </p> <p></p> <p>6. Configure Settings: </p> <ul> <li>Database Name: Retrieve from the configuration page in the portal under 'client-side error monitoring'.</li> <li>Add Metadata: Set the following key/parameter pair via \"Additional Tag Meta\":<ul> <li>Key: <code>exclude</code></li> <li>Parameter: <code>true</code></li> </ul> </li> <li>Consent: Set to 'No additional consent required'.  </li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-client-side/#adding-trigger-to-the-tag","title":"Adding Trigger to the Tag","text":"<p>7. Create Trigger: Create a trigger for a custom event where the event name equals <code>.*</code> (using regex matching). This ensures the monitor tag fires for every single dataLayer event.  </p> <p></p> <p>8. Limit Tag Monitor Fires:  </p> <ul> <li>Choose \"Some custom events\" and select \"Random Number\" from the first dropdown menu.</li> <li>For 10% of events, select: \"Random number ends with 1\".</li> <li>For other cases, calculate the expected percentage from 2,147,483,647 (Random Number value) and fire the tag accordingly.</li> </ul>"},{"location":"tag-monitor/error-monitoring-client-side/#update-all-your-tags-to-include-tag-name","title":"Update all your tags to include Tag Name","text":"<p>9. Update meta data in all tags</p> <ul> <li>For each tag, expand \"Advanced Settings\" and check the \"Include tag name\" checkbox under \"Additional Tag Metadata\". Set the key name to \"name\" as well.</li> <li>If dealing with a large number of tags, follow these steps to update them.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-client-side/#final-steps-going-live","title":"Final Steps: Going Live","text":"<p>10. Publish Container:  </p> <ul> <li>Publish your Tag Manager container to your production environment.</li> </ul> <p>11. Access Tag Monitor Dashboard:  </p> <p>Access your Tag Monitor dashboard in the Portal provided by us. Data should now automatically populate.</p>"},{"location":"tag-monitor/error-monitoring-client-side/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Monitor.</p>"},{"location":"tag-monitor/error-monitoring-server-side/","title":"Google Tag Manager server-side: Configuring Tag Monitor","text":"<p>This guide will walk you through the steps to set up the Tag Monitor within your Google Tag Manager server-side container.</p>"},{"location":"tag-monitor/error-monitoring-server-side/#configuration-in-the-google-tag-manager-container","title":"Configuration in the Google Tag Manager Container","text":""},{"location":"tag-monitor/error-monitoring-server-side/#importing-custom-template","title":"Importing Custom Template","text":"<p>1. Download Template: Visit the Tag Monitor configuration page and download the Tag Monitor template. (Ensure you're logged into our portal.)</p> <p>2. Add Template to Google Tag Manager: Open your Google Tag Manager container. Navigate to \"Templates\" and click on \"New\" in the \"Tag Templates\" section.</p> <p></p> <p>3. Import Template</p> <ul> <li>Click on the three dots in the top-right corner and select \"Import\".</li> <li>Choose the Tag Monitor template you've downloaded and click \"Save\". No adjustments to the template are necessary.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-server-side/#configuring-the-code-cube-tag-monitor-tag","title":"Configuring the Code Cube Tag Monitor Tag","text":"<p>4. Create New Tag: Under \"Tags\" in the menu, create a new tag.</p> <p>5. Select Tag Monitor Template: Choose the Tag Monitor Template as the tag type.  </p> <p>6. Configure Settings: </p> <ul> <li>Database Name: Retrieve from the configuration page in the portal under 'client-side error monitoring'.</li> <li>** Table Name**: Retrieve from the configuration page in the portal under 'client-side error monitoring'.</li> <li>Add Metadata: Set the following key/parameter pair via \"Additional Tag Meta\":<ul> <li>Key: <code>exclude</code></li> <li>Parameter: <code>true</code></li> </ul> </li> <li>Consent: Set to 'No additional consent required'.  </li> </ul>"},{"location":"tag-monitor/error-monitoring-server-side/#adding-trigger-to-the-tag","title":"Adding Trigger to the Tag","text":"<p>7. Create Trigger: Create a trigger for a custom event where the event name equals <code>.*</code> (using regex matching). This ensures the monitor tag fires for every single dataLayer event.  </p> <p></p> <p>8. Limit Tag Monitor Fires:  </p> <ul> <li>Choose \"Some custom events\" and select \"Random Number\" from the first dropdown menu.</li> <li>For 10% of events, select: \"Random number ends with 1\".</li> <li>For other cases, calculate the expected percentage from 2,147,483,647 (Random Number value) and fire the tag accordingly.</li> </ul>"},{"location":"tag-monitor/error-monitoring-server-side/#update-all-your-tags-to-include-tag-name","title":"Update all your tags to include Tag Name","text":"<p>9. Update meta data in all tags</p> <ul> <li>For each tag, expand \"Advanced Settings\" and check the \"Include tag name\" checkbox under \"Additional Tag Metadata\". Set the key name to \"name\" as well.</li> <li>If dealing with a large number of tags, follow these steps to update them.</li> </ul> <p></p>"},{"location":"tag-monitor/error-monitoring-server-side/#final-steps-going-live","title":"Final Steps: Going Live","text":"<p>10. Publish Container:  </p> <ul> <li>Publish your Tag Manager container to your production environment.</li> </ul> <p>11. Access Tag Monitor Dashboard:  </p> <p>Access your Tag Monitor dashboard in the Portal provided by us. Data should now automatically populate.</p>"},{"location":"tag-monitor/error-monitoring-server-side/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Monitor.</p>"},{"location":"tag-monitor/introduction/","title":"Introduction","text":"1 of 2             2 of 2             1 of 2             2 of 2"},{"location":"tag-monitor/raw-offload-bigquery/","title":"Manage access to raw Tag Monitoring data in BigQuery","text":"<p>To offload BigQuery data from one project to another, we'll create a scheduled query managed by a service account.</p>  This feature is only available in the  premium package"},{"location":"tag-monitor/raw-offload-bigquery/#granting-access-to-raw-tag-monitoring-data","title":"Granting access to raw Tag Monitoring data","text":"<p>This section explains how to set up access control for offloading BigQuery data using a service account. A service account is a special Google Cloud identity used by applications or services to access Google Cloud resources.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#creating-a-service-account-for-code-cube","title":"Creating a Service Account for Code Cube","text":"<ol> <li>Navigate to the Service Account Creation Page: In the Google Cloud Console, locate the \"IAM &amp; Admin\" section and navigate to the \"Service Accounts\" page. Alternatively, you can directly access the service account creation page using [this link] (https://cloud.google.com/iam/docs/service-account-overview).</li> <li>Select your Google Cloud Project: From the dropdown menu, ensure you've selected the project containing the BigQuery dataset you want to share with Code Cube.</li> <li>Create a Service Account with a Descriptive Name:  Enter a clear and descriptive name for the service account. This name helps identify the purpose of the account (e.g., \"codecube-tagmonitor-access\"). The Google Cloud Console will generate a unique service account ID based on this name. You can edit the ID if needed, but keep in mind that it cannot be changed later.</li> <li>Assign the BigQuery User IAM role: Grant the service account the \"BigQuery User\" role. This role provides the necessary permissions to access and query BigQuery data.</li> <li>Finalize Service Account Creation: Click the \"Done\" button to create the service account.</li> </ol> <p>Important Note: After creating the service account, you'll need to share the service account ID securely with your contact at Code Cube. This ID will be used by Code Cube to establish access to your BigQuery data through the scheduled query. Remember to restrict access to the service account after granting access to Code Cube. You can manage access controls later by following the instructions in the Google Cloud documentation https://cloud.google.com/iam/docs/understanding-roles.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#preparing-the-bigquery-datasets-and-tables","title":"Preparing the BigQuery datasets and tables","text":"<p>This section guides you through creating the BigQuery datasets and tables that will store your offloaded Tag Monitoring data.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#create-the-bigquery-dataset","title":"Create the BigQuery dataset","text":"<p>A BigQuery dataset is a container that organizes your tables. Here's how to create a new dataset for Code Cube's Tag Monitoring data:</p> <ol> <li>Open the BigQuery console: In the Google Cloud Console, navigate to the BigQuery service.2. In the Explorer panel, select the project where you want to create the dataset.</li> <li>Select your project: In the BigQuery console's left-hand navigation panel, locate the \"Explorer\" section.  Ensure you have selected the GCP project where you want to store the Tag Monitoring data.</li> <li>Create a new dataset:  Within the \"Explorer\" panel, click the \"Actions\" dropdown menu and choose \"Create dataset\".</li> <li>Name your dataset: Enter a unique and descriptive name for the dataset. A good example might be \"codecube-tagmonitor\". This name helps identify the purpose of the dataset.</li> <li>Set the location:  BigQuery allows you to choose where your data is geographically stored. For this case, select \"multi-region\" and \"EU\" as the location type.</li> <li>Create the dataset: Once you've filled in the details, click the \"Create dataset\" button to create the new dataset in BigQuery.</li> </ol>"},{"location":"tag-monitor/raw-offload-bigquery/#create-the-bigquery-table-for-client-side-monitoring","title":"Create the BigQuery table for client-side monitoring","text":"<ol> <li>Select the new dataset and click 'Create table': In the BigQuery console, navigate to your newly created dataset and click the \"Create table\" button.</li> <li>Choose 'Empty table' as the table type: Select \"Empty table\" to create a new table without referencing existing data.</li> <li>Provide a descriptive table name: Enter a clear and descriptive name for the table, such as 'raw_data_client'. </li> <li> <p>Define the table schema as follows: The table schema defines the structure and data types for each column. Here's a breakdown of the columns used to store client-side monitoring data:    </p> <pre><code>| Field name        | Type          | Mode |\n| ----------------- | ------------- | --------\n| timestamp         | TIMESTAMP     |NULLABLE\n| initial_url       | STRING        | NULLABLE\n| url               | STRING        | NULLABLE\n| event_name        | STRING        | NULLABLE\n| event_timestamp   | STRING        | NULLABLE\n| container_version | STRING        | NULLABLE\n| container_id      | STRING        | NULLABLE\n| env_name          | STRING        | NULLABLE\n| tag               | RECORD        | REPEATED\n| id                | STRING        | NULLABLE\n| name              | STRING        | NULLABLE\n| status            | STRING        | NULLABLE\n| channel           | STRING        | NULLABLE\n| execution_time    | STRING        | NULLABLE\n</code></pre> </li> <li> <p>Select 'No partitioning' for this table: Partitioning is not required at this moment.</p> </li> <li>Click Create table: Once you've filled in the details, click the \"Create table\" button to create the table in BigQuery.</li> </ol>"},{"location":"tag-monitor/raw-offload-bigquery/#create-the-table-for-server-side-monitoring","title":"Create the table for server-side monitoring","text":"<ol> <li>Select the new dataset and click 'Create table': In the BigQuery console, navigate to your newly created dataset and click the \"Create table\" button.2. Choose 'Empty table' as the table type.</li> <li>Choose 'Empty table' as the table type: Select \"Empty table\" to create a new table without referencing existing data.</li> <li>Provide a descriptive table name: Enter a clear and descriptive name for the table, such as 'raw_data_server'. </li> <li> <p>Define the table schema as follows: The table schema defines the structure and data types for each column. Here's a breakdown of the columns used to store server-side monitoring data:    </p> <pre><code>| Field name        | Type      | Mode |\n| ----------------- | --------- | --------\n| timestamp         | TIMESTAMP | NULLABLE\n| url               | STRING    | NULLABLE\n| event_name        | STRING    | NULLABLE\n| event_timestamp   | INTEGER   | NULLABLE\n| client_name       | STRING    | NULLABLE\n| container_version | STRING    | NULLABLE\n| container_id      | STRING    | NULLABLE\n| env_name          | STRING    | NULLABLE\n| tag               | RECORD    | REPEATED\n| id                | STRING    | NULLABLE\n| name              | STRING    | NULLABLE\n| status            | STRING    | NULLABLE\n| execution_time    | INTEGER    | NULLABLE\n</code></pre> </li> <li> <p>Select 'No partitioning' for this table: Partitioning is not required at this moment.</p> </li> <li>Click Create table: Once you've filled in the details, click the \"Create table\" button to create the table in BigQuery.</li> </ol>"},{"location":"tag-monitor/raw-offload-bigquery/#creating-the-client-and-server-side-queries","title":"Creating the client- and server-side queries","text":"<p>This section explains how to write queries to extract client-side and server-side data from your BigQuery tables. These queries will be used later to set up scheduled data offloading to Code Cube.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#client-side-data","title":"Client-side data","text":"<p>The following SQL query retrieves all data from Code Cube's raw_data_client table for the previous day:</p> <pre><code>SELECT * FROM `code-cube.{{dataset_name}}.raw_data_client`\nWHERE DATE(timestamp) = DATE(DATE_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY))\n</code></pre> <p>** Explanation:**</p> <ul> <li>SELECT *: This selects all columns from the table.</li> <li>FROM: This clause specifies the source table, which is code-cube.{{dataset_name}}.raw_data_client.</li> <li>Replace {{dataset_name}} with the actual name of the dataset. The dataset name can be found in the portal under client-side error monitoring settings on the Tag Monitor configuration page.</li> <li>WHERE: This clause filters the results to include only data where the timestamp field falls on the previous day relative to the current time.</li> <li>DATE(timestamp): Extracts the date portion from the timestamp field.</li> <li>DATE(DATE_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY)): Calculates the date for one day before the current timestamp.</li> </ul> <p>Note: You can modify this query to filter data for a specific date range or based on other criteria.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#server-side-data","title":"Server-side data","text":"<p>The query for server-side data retrieval is similar to the client-side query, but uses the raw_data_server table instead. Simply replace \"client\" with \"server\" throughout the query:</p> <pre><code>SELECT * FROM `code-cube.{{dataset_name}}.raw_data_server`\nWHERE DATE(timestamp) = DATE(DATE_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY))\n</code></pre> <p>The {{dataset}} name is equal to the dataset name shown on the Tag Monitor configuration page.</p>"},{"location":"tag-monitor/raw-offload-bigquery/#create-the-scheduled-query-in-your-bigquery-environment","title":"Create the scheduled query in your BigQuery environment","text":"<p>The next step involves creating scheduled queries in your BigQuery environment to automate this data retrieval process. This will ensure regular data offloading to Code Cube.</p> <p>1. Provide details and schedule for the query (once a day)</p> <ul> <li>In the BigQuery console, navigate to the query editor.</li> <li>Paste your client-side or server-side query (refer to the previous section) into the editor window.</li> <li>Locate the \"Schedule\" section. This section allows you to define how often the query should run.</li> <li>Set the \"Frequency\" to \"Daily\".</li> <li>Optionally, you can define a specific time for the query to run each day.</li> </ul> <p>2. Add destination details for query results. In the \"Destination\" section, BigQuery offers various options for where to store the query results. Select here the tables created in the previous steps.</p> <p>3. Add the service account</p> <ul> <li>In the \"Job configuration\" section, locate the \"Service account\" option.</li> <li>Select the service account you created and granted access to your BigQuery data.</li> </ul> <p>4. Save the settings</p> <ul> <li>Once you've filled in all the details, review your query and configurations.</li> <li>Click the \"Save\" button to create and schedule the query.</li> </ul> <p>Additional Notes:</p> <ul> <li>BigQuery allows you to preview the query results before saving the scheduled query. This can help ensure the query retrieves the expected data.</li> <li>Consider naming your scheduled queries descriptively to improve clarity and organization within your BigQuery environment.</li> </ul>"},{"location":"tag-monitor/serverside-error-logging/","title":"Enable additional server-side error logs","text":"\u2755This feature is exclusively accessible with the Tag Monitor's premium and enterprise licenses."},{"location":"tag-monitor/serverside-error-logging/#introduction","title":"Introduction","text":"<p>To enhance error tracking of your server-side Google Tag Manager, enabling logging configurations in your Cloud environment is crucial. This document provides a implementation guide for setting up the Logging Sink on how to transfer data to Code Cube's environment. </p> <p>The logs will be received in Code Cube's cloud project and pipeline and from there matched with other error information and integrated in dashboarding and notifications.</p> <p>The following steps will be explained:</p> <ol> <li>Configure Logging Sink: Set up a logging sink in your Google Cloud Platform project where server-side Tag Management is enabled.</li> <li>Grant Access: Ensure Code Cube's project has access to this sink and its logs.</li> </ol>"},{"location":"tag-monitor/serverside-error-logging/#log-router-setup","title":"Log Router Setup","text":"<ol> <li> <p>Navigate to Log Router</p> </li> <li> <p>Open the Google Cloud Platform project where the server-side tagging Cloud Run service is enabled.</p> </li> <li>Via the navigation, go to the Log router page, found under Logging \u2192 Log router.</li> </ol> <p></p> <ol> <li>Create Sink and fill in the required details:</li> </ol> <p></p> <ul> <li>Give the sink an appropriate name, for example 'code-cube-error-logs'.</li> <li> <p>Additionaly give the sink an explainatory description.</p> </li> <li> <p>Configure the destination as a BigQuery dataset and select 'Use a BigQuery dataset in another project'.</p> </li> </ul> <p></p> <ol> <li>Enter Destination: Paste the Sink destination provided below into the designated field:</li> </ol> <p><code>bigquery.googleapis.com/projects/code-cube/datasets/{{dataset}}</code></p> <p>{{dataset}}: The name of your dataset can be found in the Portal, on the Tag Monitor configuration page.</p> <p></p> <ol> <li> <p>Set Log Filters: Input the following query in the log filters section:</p> <p><code>logName=~\"stdout\" AND textPayload!~\"https://www.googletagmanager.com/sgtm/a\" AND textPayload!~\"Listening\"</code></p> <ul> <li>Explanation:</li> <li><code>logName=~\"stdout\"</code>: Filter logs based on stdout.</li> <li><code>textPayload!~\"https://www.googletagmanager.com/sgtm/a\"</code>: Exclude GTM analytics pings.</li> <li><code>textPayload!~\"Listening\"</code>: Exclude instance initializations.</li> </ul> </li> </ol> <p>Note: Additional filters can be added for refinement, but test them in the logs explorer before applying to avoid disruptions in log writing.</p>"},{"location":"tag-monitor/serverside-error-logging/#manage-access-to-the-sink","title":"Manage access to the Sink","text":"<ol> <li>Identify Service Account: The creation of a logging sink automatically generates a new service account in your GCP project.</li> <li>Share Service Account: Locate this service account and share its name with your contact at Code Cube.</li> </ol> <p>To find the service account:</p> <ol> <li>Navigate to IAM and admin \u2192 IAM.</li> <li>Enable Google-provided role grants on the top right of the page.</li> <li>Look for the service account ending with <code>-logging.iam.gserviceaccount.com</code>.</li> <li>Copy the name of this service account, which will be granted writing permissions on the relevant dataset and share the service account with your contact at Code Cube.</li> </ol>"},{"location":"tag-monitor/tag-bulk-edit/","title":"Tag Bulk Edit","text":""},{"location":"tag-monitor/tag-bulk-edit/#update-all-your-tags-to-include-the-tag-name-in-the-meta-data","title":"Update all your tags to include the tag name in the meta data","text":"<p>In cases when many GTM tags need to be updated for proper functioning of the Tag Monitor and in order to avoid hours of manual and repetitive work, this guide might be useful.  Steps to bulk edit your tags:                     </p> <ol> <li> <p>Export your GTM containerunder Admin -&gt; Export Container -&gt; YOUR WORKSPACE -&gt; Export.                         </p> </li> <li> <p>Open the downloaded container file in an advanced text editor (like notepad++) and locate the tags block.                      </p> </li> <li> <p>Open a json file named 'tags.json' and paste the tag block into it (wrap the whole tag block in {}) and save it.                          </p> <pre><code>{\n\"tag\": []\n}\n</code></pre> </li> <li> <p>In VSCode, open an html file and paste the code below into the file.                  </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;meta name=\"description\" content=\"\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"\"&gt;\n    &lt;/head&gt;\n    &lt;script&gt;\n        window.onload = (event) =&gt; {\n            function readSingleFile(evt) {\n                var f = evt.target.files[0];\n                if (f) {\n                    const r = new FileReader();\n                    r.onload = function(e) {\n                        const contents = e.target.result;\n                        const json = JSON.parse(contents);\n                        let beforeCount = 0;\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey ? beforeCount++ : undefined);\n\n                        console.log(`We have ${beforeCount} properties in ${json.tag.length} tags`);\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey === undefined ? el.monitoringMetadataTagNameKey = \"name\" : undefined);\n\n                        let afterCount = 0;\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey ? afterCount++ : undefined);\n\n                        console.log(`Now we have ${afterCount} properties in ${json.tag.length} tags after the script work done!`);\n\n                        navigator.clipboard.writeText(JSON.stringify(json.tag));\n\n                        alert('Job done! Now you can do Ctrl+V and change the data anywhere you want!')\n                    }\n                    r.readAsText(f);\n                } else {\n                    alert(\"Failed to load file\");\n                }\n            }\n\n            document.getElementById('fileinput').addEventListener('change', readSingleFile, false);\n        }\n    &lt;/script&gt;\n    &lt;body&gt;\n        &lt;input id=\"fileinput\" type=\"file\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Run the browser and choose the tags.json file in the input field and, wait until you receive an alert message saying that the job is done. Now the modified tag block is copied into your clipboard. </p> </li> <li>Format the code block here to the standard Json format.</li> <li>Replace the old tag block in the downloaded container file with your updated and formatted block (be mindful of the correct punctuation) and save the file;</li> <li>Import container into your workspace under Admin -&gt; Import Container -&gt; choose container file and workspace -&gt; Merge.</li> </ol> <p>You're done. All your tags have been updated!</p>"},{"location":"tag-monitor/tag-inactivity/","title":"Tag Inactivity Monitoring","text":""},{"location":"tag-monitor/tag-inactivity/#product-description","title":"Product Description","text":"<p>Tag Inactivity Monitoring is a solution designed to help users monitor important tags, such as conversion tags, and receive timely notifications when the tag does not fire for more than an hour. This solution is useful for ensuring that critical tags are working properly, and for quickly identifying issues that may be impacting business operations.</p> <p>The Tag Inactivity Monitoring solution sends notifications to users via email or Slack, informing them that the tag has not fired and providing details on the last time the tag was fired. This allows users to easily spot and troubleshoot the issue. The solution is available for use from 8:00 AM to 8:00 PM, making it an ideal tool for businesses that operate during regular business hours.</p> <p>Overall, the Tag Inactivity Monitoring solution provides an easy-to-use, convenient way for businesses to monitor critical tags and quickly identify issues that may be impacting their operations.</p>"},{"location":"tag-monitor/tag-inactivity/#implementation","title":"Implementation","text":"<p>To implement the Tag Inactivity Monitoring solution, users must fill out a configuration form on the Code Cube portal. Once the form is submitted, we will take care of the rest, setting up the solution to monitor the specified tag and sending notifications as needed.</p>"},{"location":"tag-monitor/tag-inactivity/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Inactivity.</p>"}]}