{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"notifications/","title":"Enable Notifications","text":""},{"location":"notifications/#configuring-monitoring-notifications","title":"Configuring Monitoring Notifications","text":"<p>To enable monitoring notifications for our products, you can access our portal and navigate to the configuration pages of each product such as Tag Monitor, Datalayer Guard or Sitespeed Monitor. From there, select your desired method of receiving notifications based on your subscription model, such as Email, Slack, or Teams. Fill in the required fields accordingly for each method. Follow the steps below accoring to your desired method:</p>"},{"location":"notifications/#email-notifications","title":"Email Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable email updates.</li> <li>Provide the email addresses where you wish to receive the notifications.</li> </ol>"},{"location":"notifications/#slack-notifications","title":"Slack Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable Slack updates.</li> <li>Open your Slack Workspace and copy the workspace ID by clicking on the workspace name.  </li> <li>Paste the workspace ID into the corresponding field in the configuration page and save the form.</li> <li>You will be prompted to log in to your workspace and authorize our app.</li> <li>After authorizing the app, add it to your workspace by clicking the add apps button and selecting the app.</li> <li>Invite the app to the desired channel where you want to receive the notifications by clicking on the channel name, going to the integrations tab and, adding the app.</li> </ol>"},{"location":"notifications/#teams-notifications","title":"Teams Notifications","text":"<ol> <li>Go to our portal and access the configuration page of the product for which you want to enable notifications.</li> <li>Activate the toggle switch to enable Teams updates.</li> <li>Follow these steps to create an incoming webhook for the channel where you want to receive the notifications.</li> <li>Copy the generated Webhook URL and paste it into the corresoinding field and save the form.</li> </ol>"},{"location":"datalayer-guard/datalayer_guard/","title":"Product Description","text":""},{"location":"datalayer-guard/datalayer_guard/#product-description_1","title":"Product Description","text":"<p>This repository contains the DataLayer Guard source code and terraform documents. DataLayer Guard crawls through the provided pages and collect dataLayer objects. Then those objects are compared with the provided templates and checked for errors. After the script ends its work all the dataLayer snapshots together with checked URLs are saved to the BigQuery tables so as errors. If there's any errors found the client receive a message next morning with detailed description of the error and all the checkup information.</p>"},{"location":"datalayer-guard/datalayer_guard/#how-it-works","title":"How it works","text":"<p>The main point of DataLayer Guard work is to get the dataLayer object from the page after page loading or imitating the potential user actions on the page. To perform those actions DataLayer Guard using the advanced page crawling algorythms.</p> <p>To set the configuration user must fill out the configuration form on Code Cube Portal for customers.</p> <p>Steps needed for complete the implementation: 1. Select the checkup frequency (how many times per day should we run checkups) 2. Set the list of emails which should be notified about the errors 3. Turn on the slack alerts as well if it's needed 4. Fill the dataLayer events: custom event name, URL and JSON-object of the dataLayer template which would be used to check the page dataLayer</p>"},{"location":"datalayer-guard/datalayer_guard/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Dataleyer Guard.</p>"},{"location":"datalayer-guard/events-tag-manager/","title":"Configure events via Google Tag Manager","text":"<p>The DataLayer Guard normally scrapes your website to retrieve all relevant dataLayer events. But for some events this is not possible. Therefore we developed this fallback method which can be implemented via for example Google Tag Manager.</p> <p>For example usefull for the following interactions: - Purchases - Logging in - Creating a new account - Saving or removing favourites when logged in</p>"},{"location":"datalayer-guard/events-tag-manager/#implementation-in-google-tag-manager","title":"Implementation in Google Tag Manager","text":""},{"location":"datalayer-guard/events-tag-manager/#1-create-a-new-tag","title":"1. Create a new tag","text":"<ol> <li>Add a new custom HTML tag to the container<ol> <li>Give this tag a name, for example 'Code Cube - DataLayer Guard'</li> </ol> </li> <li>Add the script below in the empty HTML tag</li> </ol> <pre><code>&lt;script&gt;\nvar data = JSON.stringify({\n  \"client_name\": \"dataset_name\",\n  \"url\": {{Page URL}},\n  \"timestamp\": Date.now(),\n  \"dataLayer\": {{JS - dataLayer}}\n});\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://purchase-event-receiver-6k3dd6vtka-ew.a.run.app/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\nxhr.send(data);\n&lt;/script&gt; \n\n</code></pre> <ol> <li>There are a couple of variables that you do need to add configure.<ol> <li>\"client_name\": Can be found in the configuration page</li> <li>url: Make sure that you have the built-in variabele \"Page URL\" enabled in your container</li> <li> <p>dataLayer: Create a new custom javaScript variabele in your tag container</p> <ol> <li>Give the variabele the name 'JS - dataLayer'</li> <li>Add the script below in the custom javaScript variabele</li> </ol> <p>```javascript  function(){  var dataLayer = JSON.stringify(window.dataLayer) return dataLayer; }</p> <p>```</p> </li> </ol> </li> </ol>"},{"location":"datalayer-guard/events-tag-manager/#2-add-the-trigger-to-the-tag","title":"2. Add the trigger to the tag","text":"<ol> <li>Add the custom event trigger to the tag based on the dataLayer event name.</li> <li>Firing the dataLayer monitor for 10% of the events is mostly enough.<ol> <li>Add the following rule: Random number ends with 1</li> </ol> </li> </ol>"},{"location":"datalayer-guard/events-tag-manager/#3-test-your-changes-in-the-preview-mode-and-publish","title":"3. Test your changes in the preview mode and publish","text":"<p>Most important is to make sure the variabele {{JS - dataLayer}} contains the right dataLayer object that you would like to monitor.</p>"},{"location":"site-speed-monitoring/site_speed/","title":"Site speed","text":""},{"location":"site-speed-monitoring/site_speed/#product-description","title":"Product Description","text":"<p>The Sitespeed Monitor checks the website performance by taking snapshots during the page load and collect the data of various metrics such as requests count, third party requests data, cumulative layout shift, CSS files and scripts loading time e.t.c. By the end of the checkup the overall score will be calculated to show overall performance score from 0 to 100.</p>"},{"location":"site-speed-monitoring/site_speed/#how-it-works","title":"How it works","text":"<p>To set the configuration user must fill out the configuration form on Code Cube Portal for customers.</p> <p>Steps needed for complete the implementation: 1. Select the checkup frequency (how many times per day should we run checkups) 2. Set the list of emails which should be notified about the results 3. Turn on the slack alerts as well if it's needed</p>"},{"location":"tag-monitor/a-tag-monitor/","title":"Product Description","text":""},{"location":"tag-monitor/a-tag-monitor/#product-description_1","title":"Product Description","text":"<p>This repository contains the Tag Monitor source code and terraform documents. Tag Monitor uses Google Tag Management which is a tag delivery system that allows you to quickly and easily update measurement codes and related code fragments (collectively known as tags) on a website or mobile app. Tag monitoring will allow you to understand if important tags are actually firing for real users and see when they break down in a well formatted table. </p>"},{"location":"tag-monitor/a-tag-monitor/#how-it-works","title":"How it works","text":"<p>The key deliverable of Tag monitor is a BigQuery view that collects data from a website. This is supported by a Cloud Function that collects the pixel and stores it into BigQuery. The data will be sent by way of a new Google Tag Manager custom template, and it will comprise statistics of all the tags (or a random portion of it) that have fired on the website for any given dataLayer event.</p> <p></p> <p>The basic setup of the monitor collects the following metadata from each dataLayer event: - Event name and timestamp (to uniquely distinguish events with the same name from each other). - Tag ID, name, firing status, and execution time for every tag that fired for that event (or null if no tags fired for the event).</p> <p>This solution can be easily extended to include other metadata, like container ID, domain etc.</p>"},{"location":"tag-monitor/error-monitoring-client-side/","title":"Google Tag Manager client-side","text":"<p>This guide explains how to configure the Tag Monitor in your Google Tag Manager client-side container.</p>"},{"location":"tag-monitor/error-monitoring-client-side/#1-configuration-in-the-google-tag-manager-container","title":"1. Configuration in the Google Tag Manager container","text":""},{"location":"tag-monitor/error-monitoring-client-side/#import-custom-template","title":"Import custom template","text":"<ul> <li>Downlaod the Google Tag Manager template from the Tag Monitor configuration page link, under the option 'client side error monitoring'.</li> <li>Go to your Google Tag Manager container, go to templates and create a new template.</li> </ul> <ul> <li>Click on the three dots in the right corner and select \u2018Import\u2019. Select the Tag Monitor template you\u2019ve just       downloaded and click on \u2018Save\u2019. You don\u2019t need to make any adjustments to the template.  </li> </ul>"},{"location":"tag-monitor/error-monitoring-client-side/#4-create-a-new-tag-based-on-this-template","title":"4. Create a new tag based on this template","text":"<ul> <li>Create a new tag under \u2018Tags\u2019 in the menu.</li> <li>Select the Tag Monitor Template as tag type, this is the template you have just added to the container.</li> </ul>"},{"location":"tag-monitor/error-monitoring-client-side/#5-configure-the-tag","title":"5. Configure the tag","text":"<ul> <li>Click on the three dots in the right corner and select \u2018Import\u2019. Select the Tag Monitor template you\u2019ve just       downloaded and click on \u2018Save\u2019. You don\u2019t need to make any adjustments to the template.</li> </ul>"},{"location":"tag-monitor/error-monitoring-client-side/#6-add-a-new-custom-event-trigger-to-the-tag","title":"6. Add a new Custom Event Trigger to the tag","text":"<ul> <li>Create a trigger for a custom event where event name equals .* (use regex matching). With that regular expression for the event name, the monitor tag will fire for every single dataLayer event.    </li> <li>To limit the number of times Tag Monitor fires, click \"Some custom events\" and select Random Number in the first dropdown menu.\\    If it's not in the list, create a built-in variable Random Number and repeat.</li> <li>For 10% of the events choose: Random number ends with 1.</li> <li>For other cases, calculate the expected percentage from 2,147,483,647 (Random Number value) and fire the tag in that number of cases. For example, if you need to limit Tag Monitor firing to 5% of events, use: Random number is less than or equals to 107,374,182 (2,147,483,647*0.05).           </li> </ul>"},{"location":"tag-monitor/error-monitoring-client-side/#7-update-all-your-tags-to-include-the-tag-name-in-the-meta-data","title":"7. Update all your tags to include the tag name in the meta data","text":"<ul> <li> <p>For each tag, expand the Advanced Settings and check the \u2018\u2019Include tag name\u2019 checkbox under Additional Tag Metadata. Set the key name to name as well.     </p> </li> <li> <p>If you're dealing with a large number of tags, please follow these steps to update them.</p> </li> </ul>"},{"location":"tag-monitor/error-monitoring-client-side/#you-are-done-lets-go-live","title":"You are done. Let\u2019s go live!","text":"<ol> <li>Publish your Tag Manager container to your production environment.</li> <li>You\u2019ve received access to the Portal from us. In the Portal you can find your Tag Monitor dashboard. Data should now automatically come in!</li> </ol>"},{"location":"tag-monitor/error-monitoring-client-side/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Monitor.</p>"},{"location":"tag-monitor/error-monitoring-server-side/","title":"server-side Tag Monitor Implementation","text":""},{"location":"tag-monitor/error-monitoring-server-side/#1-build-a-custom-gtm-template","title":"1. Build a custom GTM template","text":"<p>In Google Tag Manager, open up the Templates view, and create a new tag template. You can download template here and import it directly into your container.</p>"},{"location":"tag-monitor/error-monitoring-server-side/#2-create-a-monitoring-tag","title":"2. Create a monitoring tag","text":"<p>In GTM, go to Tags and create a new tag. Select the template you just created from the tag type selector. Now you need to configure the tag. There are three fields you need to set: - Project ID \u2013 set to the GCP project ID of the project where the BigQuery table is. If it\u2019s the same project as the one running your Server container, you can leave this field blank. - Dataset ID \u2013 set to the Dataset ID of the BigQuery table. - Table ID \u2013 set to the Table ID of the BigQuery table.</p> <p>Note: You will be given the value for the above-mentioned field from us.       Expand Advanced Settings and scroll down to Additional Tag Metadata. Click it open, then click the + Add Metadata button, and set these values:     Key: <code>exclude</code>     Value: <code>true</code></p> <p></p>"},{"location":"tag-monitor/error-monitoring-server-side/#3-add-a-trigger","title":"3. Add a trigger","text":"<p>Go to Triggers and click NEW to create a new trigger which will fire on all events. Add this trigger to your monitoring tag, and then save the tag. To limit the number of times Tag Monitor fires, click \"Some events\" and select Random Number in the first dropdown menu (if it's not in the list, create a built-in variable Random Number and repeat). For 10% of the events, choose Random number -&gt; ends with -&gt; 1. For other cases, calculate the expected percentage from 2,147,483,647 (Random Number value) and fire the tag in that number of cases. For example, if you need to limit Tag Monitor firing to 5% of events, use: Random number -&gt; less than or equals to -&gt; 107,374,182 (2,147,483,647*0.05).        </p>"},{"location":"tag-monitor/error-monitoring-server-side/#4-update-all-your-tags-to-include-the-tag-name-metadata","title":"4. Update all your tags to include the tag name metadata","text":"<p>For each tag, expand the Advanced Settings and check the Include tag name checkbox under Additional Tag Metadata. Set the key name to <code>name</code>. If you're dealing with a large number of tags, please follow these steps to update them. If needed, you can add even more key-value pairs to the tag metadata \u2013 you just need to modify the monitoring template to add these to the BigQuery API call. And, of course, you need a BigQuery table schema that accepts the new values.                    </p>"},{"location":"tag-monitor/error-monitoring-server-side/#5-check-results","title":"5. Check results","text":"<p>Open Preview and validate that everything works as expected. Note that in the server container preview mode a webpage is not opened automatically, so you should manually open it to see the data streaming. Another way to validate that Tag Monitor is working is to check the results in the BigQuery table.   </p> <p>Note: To check the results in preview, you need to open the preview on GTM client container simultaneously with the server-side preview. </p>"},{"location":"tag-monitor/error-monitoring-server-side/#6-grant-permission","title":"6. Grant Permission","text":"<p>This can be done in IAM &amp; Admin &gt; Service Accounts in Google Cloud Platform. Copy the email of associated services below and send it to us in order to be granted access to our BigQuery.</p> <ul> <li>The service account under which the server-side tracking is added.</li> <li>The compute engine service.</li> </ul>"},{"location":"tag-monitor/error-monitoring-server-side/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Monitor.</p>"},{"location":"tag-monitor/tag-bulk-edit/","title":"Tag Bulk Edit","text":""},{"location":"tag-monitor/tag-bulk-edit/#update-all-your-tags-to-include-the-tag-name-in-the-meta-data","title":"Update all your tags to include the tag name in the meta data","text":"<p>In cases when many GTM tags need to be updated for proper functioning of the Tag Monitor and in order to avoid hours of manual and repetitive work, this guide might be useful.  Steps to bulk edit your tags:                     </p> <ol> <li> <p>Export your GTM containerunder Admin -&gt; Export Container -&gt; YOUR WORKSPACE -&gt; Export.                         </p> </li> <li> <p>Open the downloaded container file in an advanced text editor (like notepad++) and locate the tags block.                      </p> </li> <li> <p>Open a json file named 'tags.json' and paste the tag block into it (wrap the whole tag block in {}) and save it.                          </p> <pre><code>{\n\"tag\": []\n}\n</code></pre> </li> <li> <p>In VSCode, open an html file and paste the code below into the file.                  </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;meta name=\"description\" content=\"\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"\"&gt;\n    &lt;/head&gt;\n    &lt;script&gt;\n        window.onload = (event) =&gt; {\n            function readSingleFile(evt) {\n                var f = evt.target.files[0];\n                if (f) {\n                    const r = new FileReader();\n                    r.onload = function(e) {\n                        const contents = e.target.result;\n                        const json = JSON.parse(contents);\n                        let beforeCount = 0;\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey ? beforeCount++ : undefined);\n\n                        console.log(`We have ${beforeCount} properties in ${json.tag.length} tags`);\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey === undefined ? el.monitoringMetadataTagNameKey = \"name\" : undefined);\n\n                        let afterCount = 0;\n\n                        json.tag.forEach(el =&gt;\n                            el.monitoringMetadataTagNameKey ? afterCount++ : undefined);\n\n                        console.log(`Now we have ${afterCount} properties in ${json.tag.length} tags after the script work done!`);\n\n                        navigator.clipboard.writeText(JSON.stringify(json.tag));\n\n                        alert('Job done! Now you can do Ctrl+V and change the data anywhere you want!')\n                    }\n                    r.readAsText(f);\n                } else {\n                    alert(\"Failed to load file\");\n                }\n            }\n\n            document.getElementById('fileinput').addEventListener('change', readSingleFile, false);\n        }\n    &lt;/script&gt;\n    &lt;body&gt;\n        &lt;input id=\"fileinput\" type=\"file\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Run the browser and choose the tags.json file in the input field and, wait until you receive an alert message saying that the job is done. Now the modified tag block is copied into your clipboard. </p> </li> <li>Format the code block here to the standard Json format.</li> <li>Replace the old tag block in the downloaded container file with your updated and formatted block (be mindful of the correct punctuation) and save the file;</li> <li>Import container into your workspace under Admin -&gt; Import Container -&gt; choose container file and workspace -&gt; Merge.</li> </ol> <p>You're done. All your tags have been updated!</p>"},{"location":"tag-monitor/tag-inactivity/","title":"Tag Inactivity Monitoring","text":""},{"location":"tag-monitor/tag-inactivity/#product-description","title":"Product Description","text":"<p>Tag Inactivity Monitoring is a solution designed to help users monitor important tags, such as conversion tags, and receive timely notifications when the tag does not fire for more than an hour. This solution is useful for ensuring that critical tags are working properly, and for quickly identifying issues that may be impacting business operations.</p> <p>The Tag Inactivity Monitoring solution sends notifications to users via email or Slack, informing them that the tag has not fired and providing details on the last time the tag was fired. This allows users to easily spot and troubleshoot the issue. The solution is available for use from 8:00 AM to 8:00 PM, making it an ideal tool for businesses that operate during regular business hours.</p> <p>Overall, the Tag Inactivity Monitoring solution provides an easy-to-use, convenient way for businesses to monitor critical tags and quickly identify issues that may be impacting their operations.</p>"},{"location":"tag-monitor/tag-inactivity/#implementation","title":"Implementation","text":"<p>To implement the Tag Inactivity Monitoring solution, users must fill out a configuration form on the Code Cube portal. Once the form is submitted, we will take care of the rest, setting up the solution to monitor the specified tag and sending notifications as needed.</p>"},{"location":"tag-monitor/tag-inactivity/#configuring-error-monitoring-notifications","title":"Configuring Error Monitoring Notifications","text":"<p>Follow the steps here to enable notifications for Tag Inactivity.</p>"}]}